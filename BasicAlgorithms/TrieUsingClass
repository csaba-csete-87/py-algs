class TrieNode(object):
    def __init__(self):
        self.is_word = False
        self.children = {}

class Trie(object):
    def __init__(self):
        self.root = TrieNode()

    def add(self, word):
        current_node = self.root
        for i in range(0, len(word)):
            letter = word[i]
            if letter not in current_node.children:
                child_node = TrieNode()
                current_node.children[word[i]] = child_node
            current_node = current_node.children[letter]
        current_node.is_word = True


    def exists(self, word):
        current_node = self.root
        for i in range(0, len(word)):
            letter = word[i]
            if letter not in current_node.children:
                return False
            else:
                current_node = current_node.children[letter]
        return current_node.is_word


word_list = ['apple', 'bear', 'goo', 'good', 'goodbye', 'goods', 'goodwill', 'gooses'  ,'zebra']
word_trie = Trie()

# Add words
for word in word_list:
    word_trie.add(word)

# Test words
test_words = ['bear', 'goo', 'good', 'goos']
for word in test_words:
    if word_trie.exists(word):
        print('"{}" is a word.'.format(word))
    else:
        print('"{}" is not a word.'.format(word))